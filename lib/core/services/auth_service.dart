import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/user_model.dart';
import 'account_history_service.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final GoogleSignIn _googleSignIn = GoogleSignIn(
    serverClientId: "934304345161-rrn330dcjsujums8vba8b2ng521lu1re.apps.googleusercontent.com",
  );
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  String? _verificationId;

  String normalizePhoneNumber84(String phone) {
    phone = phone.replaceAll(RegExp(r'\s+'), ''); // X√≥a kho·∫£ng tr·∫Øng
    if (phone.startsWith('0')) {
      return '+84${phone.substring(1)}';
    }
    return phone; // N·∫øu ƒë√£ l√† +84 th√¨ gi·ªØ nguy√™n
  }

  // ‚úÖ G·ª≠i OTP
  Future<String?> sendOTP(String phoneNumber) async {
    String? verificationId;
    await _auth.verifyPhoneNumber(
      phoneNumber: phoneNumber,
      timeout: const Duration(seconds: 60),
      verificationCompleted: (PhoneAuthCredential credential) async {
        await _auth.signInWithCredential(credential);
      },
      verificationFailed: (FirebaseAuthException e) {
        throw Exception("üî• L·ªói g·ª≠i OTP: ${e.message}");
      },
      codeSent: (String vId, int? resendToken) {
        verificationId = vId;
      },
      codeAutoRetrievalTimeout: (String vId) {
        verificationId = vId;
      },
    );

    // ƒê·ª£i verificationId ƒë∆∞·ª£c set xong
    while (verificationId == null) {
      await Future.delayed(const Duration(milliseconds: 100));
    }

    return verificationId;
  }

  // ‚úÖ X√°c th·ª±c OTP
  Future<bool> verifyOTP(String otpCode) async {
    try {
      if (_verificationId == null) throw Exception("Kh√¥ng t√¨m th·∫•y m√£ x√°c minh");

      PhoneAuthCredential credential = PhoneAuthProvider.credential(
        verificationId: _verificationId!,
        smsCode: otpCode,
      );

      await _auth.signInWithCredential(credential);
      return true;
    } catch (e) {
      throw Exception("üî• L·ªói x√°c th·ª±c OTP: $e");
    }
  }

  // ‚úÖ L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o Firestore
  Future<void> saveUserInfo(UserModel userModel) async {
    try {
      await _firestore.collection("users").doc(userModel.uid).set(
        userModel.toMap(),
        SetOptions(merge: true),
      );
    } catch (e) {
      throw Exception("üî• L·ªói l∆∞u th√¥ng tin: $e");
    }
  }

  // ‚úÖ ƒêƒÉng nh·∫≠p b·∫±ng Google
  Future<UserModel?> signInWithGoogle() async {
    try {
      await _googleSignIn.signOut();

      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();

      if (googleUser == null) return null;

      final googleAuth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      UserCredential result = await _auth.signInWithCredential(credential);
      User? user = result.user;

      if (user != null) {
        final docRef = _firestore.collection('users').doc(user.uid);
        final userDoc = await docRef.get();

        if (userDoc.exists) {
          // ‚úÖ N·∫øu ƒë√£ c√≥ t√†i kho·∫£n -> ch·ªâ c·∫≠p nh·∫≠t emailAvatarUrl n·∫øu c·∫ßn
          await docRef.update({
            'emailAvatarUrl': user.photoURL ?? "",
            'updatedAt': FieldValue.serverTimestamp(),
          });
        } else {
          // ‚úÖ N·∫øu t√†i kho·∫£n m·ªõi -> t·∫°o ƒë·∫ßy ƒë·ªß th√¥ng tin c∆° b·∫£n
          await docRef.set({
            'uid': user.uid,
            'email': user.email ?? '',
            'displayName': "Ng∆∞·ªùi d√πng", // Kh√¥ng l·∫•y t·ª´ Gmail ƒë·ªÉ ƒë·ªìng nh·∫•t
            'emailAvatarUrl': user.photoURL ?? "",
            'photoUrl': "", // Ch∆∞a c√≥ avatar t·ª± ch·ªçn
            'phoneNumber': "", // Ch∆∞a c√≥, s·∫Ω c·∫≠p nh·∫≠t sau
            'age': 0, // M·∫∑c ƒë·ªãnh
            'gender': "Kh√¥ng x√°c ƒë·ªãnh",
            'role': "Kh√¥ng x√°c ƒë·ªãnh",
            'isHomeOwner': false,
            'isNewUser': true,
            'isProfileComplete': false, // Ch·ªù b·ªï sung th√¥ng tin
            'updatedAt': FieldValue.serverTimestamp(),
          });
        }
        final userModel = UserModel(
          uid: user.uid,
          email: user.email ?? '',
          displayName: "Ng∆∞·ªùi d√πng",
          emailAvatarUrl: user.photoURL ?? "",
          photoUrl: "", // T·∫°m th·ªùi
          phoneNumber: "",
          age: 0,
          gender: "Kh√¥ng x√°c ƒë·ªãnh",
          role: "Kh√¥ng x√°c ƒë·ªãnh",
          isHomeOwner: false,
          isNewUser: true,
        );

        await AccountHistoryService.saveAccount(userModel);
        return userModel;
      }
      return null;
    } catch (e) {
      throw Exception("üî• L·ªói ƒëƒÉng nh·∫≠p Google: $e");
    }
  }

  // ‚úÖ ƒêƒÉng xu·∫•t to√†n b·ªô
  Future<void> signOut() async {
    try {
      await _auth.signOut();
      await _googleSignIn.signOut();
    } catch (e) {
      throw Exception("üî• L·ªói ƒëƒÉng xu·∫•t: $e");
    }
  }

  // ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
  Future<UserModel?> getCurrentUser() async {
    final user = _auth.currentUser;
    if (user != null) {
      final doc = await _firestore.collection("users").doc(user.uid).get();
      if (doc.exists) {
        final userModel = UserModel.fromMap(doc.data()!);

        // ‚úÖ L∆∞u t√†i kho·∫£n v√†o l·ªãch s·ª≠
        await AccountHistoryService.saveAccount(userModel);
        return userModel;
      }
    }
    return null;
  }

  // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  Future<void> updateUserInfo(String uid, Map<String, dynamic> updatedData) async {
    try {
      await _firestore.collection("users").doc(uid).update(updatedData);
    } catch (e) {
      throw Exception("üî• L·ªói c·∫≠p nh·∫≠t th√¥ng tin: $e");
    }
  }
}